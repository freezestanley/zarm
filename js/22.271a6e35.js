(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{306:function(n,e,r){"use strict";r.r(e);var t=r(3),a=r.n(t),s=r(4),o=r.n(s),c=r(2),i=r.n(c),l=r(5),d=r.n(l),u=function(n){function e(){var n,t,s,c;o()(this,e);for(var l=arguments.length,d=Array(l),u=0;u<l;u++)d[u]=arguments[u];return t=s=i()(this,(n=e.__proto__||a()(e)).call.apply(n,[this].concat(d))),s.document=function(){return{document:r(489),className:"message-page"}},c=t,i()(s,c)}return d()(e,n),e}(r(460).a);e.default=u},460:function(n,e,r){"use strict";var t=r(3),a=r.n(t),s=r(4),o=r.n(s),c=r(6),i=r.n(c),l=r(2),d=r.n(l),u=r(5),m=r.n(u),g=r(0),p=r.n(g),f=r(462),h=r.n(f),v=r(463),M=r.n(v),b=(r(464),r(461),function(n){function e(){return o()(this,e),d()(this,(e.__proto__||a()(e)).apply(this,arguments))}return m()(e,n),i()(e,[{key:"render",value:function(){var n=this.document(localStorage.getItem("LANGUAGE")||"zh-CN"),e=n.document,r=n.className;if("string"==typeof e){var t=new h.a.Renderer;t.table=function(n,e){return'<div class="grid-container"><table class="grid"><thead>'+n+"</thead><tbody>"+e+"</tbody></table></div>"},t.code=function(n,e){return'<pre><code class="hljs '+e+'">'+(!(!e||!M.a.getLanguage(e))?M.a.highlight(e,n).value:n)+"</code></pre>"};var a=h()(e,{renderer:t});return p.a.createElement("div",{className:r,dangerouslySetInnerHTML:{__html:a}})}return p.a.createElement("span",null)}}]),e}(g.Component));e.a=b},461:function(n,e,r){},489:function(n,e){n.exports="# 消息 Message\n\n\n\n## 基本用法\n```jsx\nimport { Message, Icon } from 'zarm';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Message>普通</Message>\n        <Message theme=\"error\">自定义主题</Message>\n        <Message icon={<Icon type=\"wrong-round\" />}>自定义图标</Message>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## 可操作\n```jsx\nimport { Message } from 'zarm';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Message hasArrow onClick={() => alert('click this message!')}>链接样式的</Message>\n        <Message closable>可关闭的</Message>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :--- |\n| theme | string | 'primary' | 主题，可选值 `default`、`primary`、`info`、`success`、`warning`、`error` |\n| size | string | 'md' | 设置大小，可选值为 `md`、`lg` |\n| icon | ReactNode | - | 设置图标 |\n| closable | boolean | false | 是否显示关闭按钮 |\n| hasArrow | boolean | false | 是否显示箭头 |\n| onClick | () => void | - | 点击后触发的回调函数 |\n"}}]);