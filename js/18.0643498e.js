(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{302:function(n,e,t){"use strict";t.r(e);var r=t(3),l=t.n(r),o=t(4),a=t.n(o),u=t(2),s=t.n(u),i=t(5),c=t.n(i),p=function(n){function e(){var n,r,o,u;a()(this,e);for(var i=arguments.length,c=Array(i),p=0;p<i;p++)c[p]=arguments[p];return r=o=s()(this,(n=e.__proto__||l()(e)).call.apply(n,[this].concat(c))),o.document=function(){return{document:t(485),className:"input-page"}},u=r,s()(o,u)}return c()(e,n),e}(t(460).a);e.default=p},460:function(n,e,t){"use strict";var r=t(3),l=t.n(r),o=t(4),a=t.n(o),u=t(6),s=t.n(u),i=t(2),c=t.n(i),p=t(5),d=t.n(p),m=t(0),h=t.n(m),C=t(462),f=t.n(C),v=t(463),g=t.n(v),b=(t(464),t(461),function(n){function e(){return a()(this,e),c()(this,(e.__proto__||l()(e)).apply(this,arguments))}return d()(e,n),s()(e,[{key:"render",value:function(){var n=this.document(localStorage.getItem("LANGUAGE")||"zh-CN"),e=n.document,t=n.className;if("string"==typeof e){var r=new f.a.Renderer;r.table=function(n,e){return'<div class="grid-container"><table class="grid"><thead>'+n+"</thead><tbody>"+e+"</tbody></table></div>"},r.code=function(n,e){return'<pre><code class="hljs '+e+'">'+(!(!e||!g.a.getLanguage(e))?g.a.highlight(e,n).value:n)+"</code></pre>"};var l=f()(e,{renderer:r});return h.a.createElement("div",{className:t,dangerouslySetInnerHTML:{__html:l}})}return h.a.createElement("span",null)}}]),e}(m.Component));e.a=b},461:function(n,e,t){},485:function(n,e){n.exports='# 文本框 Input\n\n## 基本用法\n\n```jsx\nimport { Input, Cell } from \'zarm\';\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      inputValue: \'\',\n    }\n  }\n\n  handleInputChange(value) {\n    this.setState({\n      inputValue: value,\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Cell title="单行文本">\n          <Input\n            type="text"\n            placeholder="请输入"\n            value={this.state.inputValue}\n            onChange={this.handleInputChange.bind(this)}\n            />\n        </Cell>\n        <Cell title="多行文本"><Input type="text" rows={3} placeholder="请输入" /></Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n## 输入类型\n\n```jsx\nimport { Input, Cell } from \'zarm\';\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      focused: false,\n      number: \'\',\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Cell title="数字">\n          <Input\n            ref={(ref) => { this.manualFocus = ref; }}\n            type="number"\n            placeholder="type is number"\n            value={this.state.number}\n            focused={this.state.focused}\n            onFocus={value => console.log(`onFocus: ${value}`)}\n            onBlur={value => console.log(`onBlur: ${value}`)}\n          />\n        </Cell>\n\n        <Cell title="金额">\n          <Input type="price" placeholder="type is price" />\n        </Cell>\n\n        <Cell title="身份证">\n          <Input type="idcard" placeholder="type is idcard" />\n        </Cell>\n\n        <Cell>\n          <button onClick={() => this.manualFocus.focus()}>click to focus the first input</button>\n        </Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## 高度自适应\n\n```jsx\nimport { Input, Cell } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell title="多行文本"><Input autoHeight type="text" rows={3} placeholder="写点啥..." /></Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## 无标签栏\n```jsx\nimport { Input, Cell } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell><Input type="text" placeholder="标题" /></Cell>\n        <Cell><Input autoHeight type="text" rows={4} maxLength={200} placeholder="摘要" /></Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## 显示输入字数\n```jsx\nimport { Input, Cell } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell><Input autoHeight showLength type="text" rows={4} maxLength={200} placeholder="摘要" /></Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :--- |\n| type | string | \'text\' | 类型，可选值 `text`、`number`、`idcard`、`price`、`password`、`search` |\n| value | number | string | - | 值 |\n| defaultValue | number | string | - | 初始值 |\n| disabled | boolean | false | 是否禁用 |\n| rows | number | 2 | 多行文本时的显示行数。type为text类型时有效。 |\n| autoHeight | boolean | false | 是否高度自适应 |\n| maxLength | number | - | 输入字数上限 |\n| showLength | boolean | false | 是否显示输入字数。多行文本（type="text"且包含rows属性）时有效。 |\n| clearable | boolean | true | 是否显示清除按钮。多行文本（type="text"且包含rows属性）时无效。必须为受控组件（属性包含value、onChange）时方可生效。 |\n| onChange | (value?: number \\| string) => void | - | 值变化时触发的回调函数 |\n\n'}}]);